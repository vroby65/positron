#!/usr/bin/env python3
# Positron: mini "Electron-like" con pywebview
# - Serve ./www su http://127.0.0.1:7000
# - Titolo = POSITRON_TITLE (env) o basename eseguibile
# - Persistenza (localStorage/cookie) per-bundle
# - Opzioni finestra: --size, --min-size, --pos, --fullscreen, --fixed, --gui

import os
import sys
import time
import socket
import threading
import argparse
from http.server import ThreadingHTTPServer, SimpleHTTPRequestHandler
from pathlib import Path

import webview

HOST = "127.0.0.1"
PORT = 7000

# ----------------- util -----------------
def parse_size(s: str):
    try:
        w, h = s.lower().split("x")
        w, h = int(w), int(h)
        if w < 100 or h < 100:
            raise ValueError
        return (w, h)
    except Exception:
        raise argparse.ArgumentTypeError("Formato atteso: WIDTHxHEIGHT (es. 1200x800)")

def parse_pos(s: str):
    try:
        x, y = s.split(",")
        return (int(x), int(y))
    except Exception:
        raise argparse.ArgumentTypeError("Formato atteso: X,Y (es. 100,50)")

def wait_for_server(host: str, port: int, timeout: float = 5.0) -> bool:
    deadline = time.time() + timeout
    while time.time() < deadline:
        with socket.socket() as s:
            s.settimeout(0.25)
            try:
                s.connect((host, port))
                return True
            except OSError:
                time.sleep(0.1)
    return False

def start_http_server(root: Path, host: str, port: int) -> ThreadingHTTPServer:
    class Handler(SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, directory=str(root), **kwargs)
        def log_message(self, fmt, *args):
            sys.stdout.write(f"[http] {self.address_string()} - " + (fmt % args) + "\n")

    httpd = ThreadingHTTPServer((host, port), Handler)
    httpd.daemon_threads = True
    threading.Thread(target=httpd.serve_forever, name="positron-http", daemon=True).start()
    return httpd

def ensure_default_index(www_dir: Path) -> None:
    index = www_dir / "index.html"
    if index.exists():
        return
    index.write_text(
        """<!doctype html>
<meta charset="utf-8"><title>Positron</title>
<style>:root{color-scheme:light dark}body{font:16px/1.5 system-ui;margin:2rem;max-width:60ch}</style>
<h1>Positron è vivo ✨</h1>
<p>Questa pagina è servita da <code>./www</code>. Modifica <code>www/index.html</code>.</p>
<p id="ls"></p>
<script>
  const n = +(localStorage.getItem("visite")||0) + 1;
  localStorage.setItem("visite", n);
  document.getElementById("ls").innerHTML = "Visite (localStorage): <b>"+n+"</b>";
</script>""",
        encoding="utf-8",
    )

def on_loaded(window: "webview.Window"):
    try:
        res = window.evaluate_js("(() => { localStorage.setItem('__probe','ok'); return 6*7; })()")
        print(f"[positron] JS ok -> {res}")
    except Exception as e:
        print(f"[positron] JS evaluate_js FAILED: {e}")

# ----------------- main -----------------
def main():
    ap = argparse.ArgumentParser(description="Positron runner")
    ap.add_argument("--gui", help="Backend GUI (gtk/qt/edgechromium/mshtml/cocoa)")
    ap.add_argument("--debug", action="store_true", help="Abilita debug pywebview")
    ap.add_argument("--size", type=parse_size, help="Dimensione finestra: WIDTHxHEIGHT (es. 1200x800)")
    ap.add_argument("--min-size", dest="min_size", type=parse_size, help="Dimensione minima: WIDTHxHEIGHT")
    ap.add_argument("--pos", type=parse_pos, help="Posizione iniziale: X,Y (es. 100,50)")
    ap.add_argument("--fullscreen", action="store_true", help="Avvia a schermo intero")
    ap.add_argument("--fixed", action="store_true", help="Blocca il ridimensionamento (non resizable)")
    args = ap.parse_args()

    base_dir = Path(__file__).resolve().parent
    www_dir = base_dir / "www"
    www_dir.mkdir(exist_ok=True)
    ensure_default_index(www_dir)

    # Server HTTP
    try:
        httpd = start_http_server(www_dir, HOST, PORT)
    except OSError as e:
        print(f"Errore: impossibile avviare il server su {HOST}:{PORT} — {e}")
        sys.exit(1)
    if not wait_for_server(HOST, PORT, timeout=5.0):
        print("Errore: server non raggiungibile dopo l'avvio.")
        sys.exit(1)

    # Titolo e storage per-bundle
    bundle_title = os.environ.get("POSITRON_TITLE") or Path(sys.argv[0]).stem or "Positron"
    storage_dir = Path.home() / ".positron" / bundle_title
    storage_dir.mkdir(parents=True, exist_ok=True)

    # Parametri finestra
    win_kwargs = {}
    if args.size:
        win_kwargs["width"], win_kwargs["height"] = args.size
    if args.min_size:
        win_kwargs["min_size"] = args.min_size
    if args.pos:
        win_kwargs["x"], win_kwargs["y"] = args.pos
    if args.fullscreen:
        win_kwargs["fullscreen"] = True
    if args.fixed:
        win_kwargs["resizable"] = False

    url = f"http://{HOST}:{PORT}"
    window = webview.create_window(bundle_title, url, **win_kwargs)

    try:
        webview.start(
            on_loaded,
            window,
            debug=args.debug or (os.environ.get("POSITRON_DEBUG", "").lower() in ("1", "true", "yes")),
            private_mode=False,            # persistenza ON
            storage_path=str(storage_dir), # per-bundle
            gui=args.gui,                  # backend selezionabile
        )
    finally:
        httpd.shutdown()
        httpd.server_close()

if __name__ == "__main__":
    main()
